{"version":3,"sources":["components/Pagination.js","components/Pagination2.js","components/character/Character.js","components/character-grid/Character-grid.js","components/episode/Episode.js","components/episode-grid/Episode-grid.js","components/grid/Grid.js","App.js","index.js"],"names":["Pagination","elementsPerPage","totalElements","paginate","pageNumbers","i","Math","ceil","push","className","map","number","onClick","href","Pagination2","Character","character","src","img","alt","name","portrayed","nickname","birthday","status","CharacterGrid","dataset","char_id","Episode","episode","title","season","air_date","class","characters","index","EpisodeGrid","episode_id","Grid","episodes","filter","useState","currentPage","setCurrentPage","currentPage2","setCurrentPage2","indexOfLastCharacter","indexOfFirstCharacter","currentCharacters","slice","indexOfLastEpisode","indexOfFirstEpisode","currentEpisodes","length","pageNumber","App","filterEpisode","funcEpisode","filterCharacter","funCharacter","funFilter","useEffect","fetch","then","response","json","data","onChange","e","target","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dc363bf.chunk.js","sourcesContent":["\r\nexport const Pagination = ({ elementsPerPage, totalElements, paginate }) => {\r\n  const pageNumbers = [];\r\n \r\n  for (let i = 1; i <= Math.ceil(totalElements / elementsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <a onClick={() => paginate(number)} href='/' className='page-link'>\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\n\r\n","\r\nexport const Pagination2 = ({ elementsPerPage, totalElements, paginate }) => {\r\n  const pageNumbers = [];\r\n \r\n  for (let i = 1; i <= Math.ceil(totalElements / elementsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <a onClick={() => paginate(number)} href='!#' className='page-link'>\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\n\r\n","import './Character.styles.css'\r\n\r\nexport const Character = ({character}) => {\r\n  // console.log(character)\r\n    return (\r\n         <div className='card'>\r\n      <div className='card-inner'>\r\n        <div className='card-front'>\r\n          <img src={character.img} alt='' />\r\n          <h5 className='card-text'>{character.name}</h5>\r\n        </div>\r\n        <div className='card-back'>\r\n          <h1>{character.name}</h1>\r\n          <ul>\r\n            <li>\r\n              <strong>Actor Name:</strong> {character.portrayed}\r\n            </li>\r\n            <li>\r\n              <strong>Nickname:</strong> {character.nickname}\r\n            </li>\r\n            <li>\r\n              <strong>Birthday:</strong> {character.birthday}\r\n            </li>\r\n            <li>\r\n              <strong>Status:</strong> {character.status}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n","import './character-grid.styles.css'\r\nimport {Character} from '../character/Character'\r\n\r\n\r\nexport const CharacterGrid= ({dataset}) => {\r\n\r\n        return <div className='cards'>{(dataset.map(\r\n            character=>(<Character key={character.char_id} character={character} />)\r\n                   ))}</div>\r\n    \r\n\r\n}\r\n","import './episode.styles.css'\r\nexport const Episode = ({episode}) => {\r\n    return (\r\n        <div className='per-episode' > \r\n              <div className='episode-info'>\r\n                  <div><b>Episode</b>:   {episode.episode}</div> \r\n                  <div><b>Title</b>:     <i>{episode.title}</i></div> \r\n                  <div><b>Season</b>:   {episode.season}</div> \r\n                  <div><b>Air Date</b>:  {episode.air_date}</div> \r\n              </div>\r\n               <div class='parent-characters'>\r\n                   <h5 class='character_title'>Characters</h5>\r\n                  <div className='per-episode-characters'>       \r\n                    {\r\n                                episode.characters.map((character,index)=><h5 key={index}>{character}</h5>)\r\n                    }\r\n                    </div>\r\n               </div>\r\n        </div>\r\n    )\r\n}\r\n","import './episode-grid.styles.css'\r\nimport {Episode} from '../episode/Episode'\r\n\r\n\r\nexport const EpisodeGrid= ({dataset}) => \r\n    {\r\n      return (<div className='episodes-grid' >\r\n              {\r\n               (dataset.map((episode)=>\r\n                            (<Episode key={`${episode.episode_id}`} episode={episode} />)))}</div>)\r\n    }\r\n\r\n   \r\n\r\n","\r\nimport {useState} from 'react'\r\n\r\n//importing required components\r\nimport {Pagination} from '../Pagination'\r\nimport {Pagination2} from '../Pagination2'\r\nimport {CharacterGrid} from '../character-grid/Character-grid'\r\nimport {EpisodeGrid} from '../episode-grid/Episode-grid'\r\n\r\n\r\nexport const Grid = ({characters ,episodes,filter}) => {\r\n\r\n  //state variable for page number for character wise;\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n    //state variable for page number for episode wise;\r\n  const [currentPage2, setCurrentPage2] = useState(1);\r\n  //total number of elements per page\r\n  const [elementsPerPage] = useState(8);\r\n\r\n\r\n\r\n/* ---Constrains for Pagination Character wise.---\r\n   Here the indexes of the characters are calculated based on how many characters need to be shown per page.\r\n\r\n   Eg: 6 characters should be shown per page and we are in page no 1 \r\n         indexOfLastCharacter=>  currentPage * elementsPerPage => 1 * 6 = 6\r\n         indexOfFirstCharacter=> indexOfLastCharacter - elementsPerPage => 6 - 6 = 0\r\n         Since the index starts from 0. The number of characters that will render is from 0 to 6 which is 7 characters.\r\n\r\n  */\r\n  const indexOfLastCharacter = currentPage * elementsPerPage;\r\n  const indexOfFirstCharacter= indexOfLastCharacter - elementsPerPage;\r\n\r\n  //here we slice the data of the Characters state variable which was passed to the Grid component as a prop \r\n  //the slice is based on the index of the first character value and the index of the last character value calculated above.\r\n  const currentCharacters = characters.slice(indexOfFirstCharacter, indexOfLastCharacter);\r\n\r\n\r\n\r\n\r\n// Constrains for Pagination Episodic wise\r\n  const indexOfLastEpisode = currentPage2 * 4;\r\n  const indexOfFirstEpisode= indexOfLastEpisode - 4;\r\n  const currentEpisodes= episodes.slice(indexOfFirstEpisode, indexOfLastEpisode);\r\n\r\n\r\n\r\n//  Change page\r\n//  paginate and paginate2 are functions which sets the page numbers of character wise data and episode wise data. \r\n\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n   const paginate2 = pageNumber => setCurrentPage2(pageNumber);\r\n\r\n    //the state variable filter is checked\r\n    // the value 1 means Character wise component should be rendered\r\n    // else the Episode wise component should be rendered\r\n    if(filter==='1')\r\n              return ( \r\n                <div>\r\n                   <Pagination \r\n                          elementsPerPage={elementsPerPage}\r\n                          totalElements={characters.length}\r\n                          paginate={paginate}/>\r\n                 <CharacterGrid dataset={currentCharacters} filter={filter}/>\r\n                 \r\n                 </div>\r\n                      )\r\n    else {    \r\n        return (\r\n              <div>\r\n                 <Pagination2 \r\n                          elementsPerPage={elementsPerPage}\r\n                          totalElements={episodes.length}\r\n                          paginate={paginate2}\r\n                          />\r\n                <EpisodeGrid  dataset={currentEpisodes} filter={filter}/>\r\n               \r\n               </div>\r\n        )\r\n    }\r\n}\r\n","/*importing Hooks as need state variables for passing data \nAnd life cycle methods for fetching data from the API as soon as component renders */\nimport {useState,useEffect} from 'react';\n\n//Grid component will have the contents of both character wise and episode wise respectively\nimport {Grid} from  './components/grid/Grid' \n\n//importing css file for styles\nimport './App.css';\n\nfunction App() {\n  //State Variable Declarations\n  /*\n  filterEpisode stores all the Episode returned from the API\n  filterCharacter stores all the Character data returned from the API\n  filter will store a 0 or 1 value where we use it to basically check if the user opted for viewing Character wise or Episode wise.\n  */\n  const [filterEpisode,funcEpisode]=useState([])  \n  const [filterCharacter,funCharacter]=useState([])\n  const  [filter,funFilter]=useState('1')\n\n  \n  //Hook Declartation\n  //The hook below is called only for the first time the component is rendered\n  useEffect(()=>\n   { \n    //characters and episode data from the API are being fetched and stored to their respective state variables\n    fetch(`https://www.breakingbadapi.com/api/episodes/`).then(response=>response.json()).then(data=>funcEpisode(data))\n    fetch(`https://www.breakingbadapi.com/api/characters/`).then(response=>response.json()).then(data=>{funCharacter(data)\n     })\n\n  },[]   \n  )\n \n\n  return ( \n    <div className=\"container\">\n      <div className='filterBoxes'>\n        <h1 className='headerText'>Breaking Bad API</h1>\n        {/* Using a select tag to switch between Characters View and Episodes View */}\n        {/* An onchange method is given where the current selected value is passed to the filter state variable. */}\n         {/* The filter state variable is created and utilised so as to make the dom update on the changes when we switch from characters view to episodes view and vice versa */}\n        <select onChange={(e)=>funFilter(e.target.value)} value={filter}><option value='1'>Characters</option><option value='2'>Episodes</option></select>\n      </div>\n      {/* In the Grid component we pass the characters and episodes state variables which was retrieved from the Breaking Bad API. */}\n         {/* The filter state variable value is also passed so that the DOM gets the trigger that the component needs to be re-rendered*/}\n      <Grid  characters={filterCharacter}   episodes={filterEpisode}   filter={filter}  />\n\n    </div>\n  );\n}\n\n//exporting the component\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}